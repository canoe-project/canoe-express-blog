0|app    | Example app listening on port 3000!
0|app    | Cursor {
0|app    |   _readableState: ReadableState {
0|app    |     objectMode: true,
0|app    |     highWaterMark: 16,
0|app    |     buffer: BufferList { head: null, tail: null, length: 0 },
0|app    |     length: 0,
0|app    |     pipes: null,
0|app    |     pipesCount: 0,
0|app    |     flowing: null,
0|app    |     ended: false,
0|app    |     endEmitted: false,
0|app    |     reading: false,
0|app    |     sync: true,
0|app    |     needReadable: false,
0|app    |     emittedReadable: false,
0|app    |     readableListening: false,
0|app    |     resumeScheduled: false,
0|app    |     emitClose: true,
0|app    |     autoDestroy: false,
0|app    |     destroyed: false,
0|app    |     defaultEncoding: 'utf8',
0|app    |     awaitDrainWriters: null,
0|app    |     multiAwaitDrain: false,
0|app    |     readingMore: false,
0|app    |     decoder: null,
0|app    |     encoding: null,
0|app    |     [Symbol(kPaused)]: null
0|app    |   },
0|app    |   readable: true,
0|app    |   _events: [Object: null prototype] {},
0|app    |   _eventsCount: 0,
0|app    |   _maxListeners: undefined,
0|app    |   operation: FindOperation {
0|app    |     options: {
0|app    |       skip: 0,
0|app    |       limit: 0,
0|app    |       raw: undefined,
0|app    |       hint: null,
0|app    |       timeout: undefined,
0|app    |       slaveOk: true,
0|app    |       readPreference: [ReadPreference],
0|app    |       db: [Db],
0|app    |       promiseLibrary: [Function: Promise]
0|app    |     },
0|app    |     ns: MongoDBNamespace { db: 'blog_post', collection: 'notice' },
0|app    |     cmd: {
0|app    |       find: 'blog_post.notice',
0|app    |       limit: 0,
0|app    |       skip: 0,
0|app    |       query: {},
0|app    |       raw: undefined,
0|app    |       hint: null,
0|app    |       timeout: undefined,
0|app    |       slaveOk: true,
0|app    |       readPreference: [ReadPreference]
0|app    |     },
0|app    |     readPreference: ReadPreference {
0|app    |       mode: 'primary',
0|app    |       tags: undefined,
0|app    |       hedge: undefined
0|app    |     },
0|app    |     cursorState: {
0|app    |       cursorId: null,
0|app    |       cmd: [Object],
0|app    |       documents: [],
0|app    |       cursorIndex: 0,
0|app    |       dead: false,
0|app    |       killed: false,
0|app    |       init: false,
0|app    |       notified: false,
0|app    |       limit: 0,
0|app    |       skip: 0,
0|app    |       batchSize: 1000,
0|app    |       currentLimit: 0,
0|app    |       transforms: undefined,
0|app    |       raw: undefined
0|app    |     }
0|app    |   },
0|app    |   pool: null,
0|app    |   server: null,
0|app    |   disconnectHandler: undefined,
0|app    |   bson: BSON {},
0|app    |   ns: 'blog_post.notice',
0|app    |   namespace: MongoDBNamespace { db: 'blog_post', collection: 'notice' },
0|app    |   cmd: {
0|app    |     find: 'blog_post.notice',
0|app    |     limit: 0,
0|app    |     skip: 0,
0|app    |     query: {},
0|app    |     raw: undefined,
0|app    |     hint: null,
0|app    |     timeout: undefined,
0|app    |     slaveOk: true,
0|app    |     readPreference: ReadPreference {
0|app    |       mode: 'primary',
0|app    |       tags: undefined,
0|app    |       hedge: undefined
0|app    |     }
0|app    |   },
0|app    |   options: {
0|app    |     skip: 0,
0|app    |     limit: 0,
0|app    |     raw: undefined,
0|app    |     hint: null,
0|app    |     timeout: undefined,
0|app    |     slaveOk: true,
0|app    |     readPreference: ReadPreference {
0|app    |       mode: 'primary',
0|app    |       tags: undefined,
0|app    |       hedge: undefined
0|app    |     },
0|app    |     db: Db {
0|app    |       _events: [Object: null prototype] {},
0|app    |       _eventsCount: 0,
0|app    |       _maxListeners: undefined,
0|app    |       s: [Object],
0|app    |       serverConfig: [Getter],
0|app    |       bufferMaxEntries: [Getter],
0|app    |       databaseName: [Getter],
0|app    |       [Symbol(kCapture)]: false
0|app    |     },
0|app    |     promiseLibrary: [Function: Promise]
0|app    |   },
0|app    |   topology: NativeTopology {
0|app    |     _events: [Object: null prototype] {
0|app    |       topologyDescriptionChanged: [Array],
0|app    |       authenticated: [Function],
0|app    |       error: [Array],
0|app    |       timeout: [Array],
0|app    |       close: [Array],
0|app    |       parseError: [Array],
0|app    |       fullsetup: [Array],
0|app    |       all: [Array],
0|app    |       reconnect: [Array],
0|app    |       commandStarted: [Function],
0|app    |       commandSucceeded: [Function],
0|app    |       commandFailed: [Function],
0|app    |       serverOpening: [Function],
0|app    |       serverClosed: [Function],
0|app    |       serverDescriptionChanged: [Function],
0|app    |       serverHeartbeatStarted: [Function],
0|app    |       serverHeartbeatSucceeded: [Function],
0|app    |       serverHeartbeatFailed: [Function],
0|app    |       topologyOpening: [Function],
0|app    |       topologyClosed: [Function],
0|app    |       joined: [Function],
0|app    |       left: [Function],
0|app    |       ping: [Function],
0|app    |       ha: [Function],
0|app    |       connectionPoolCreated: [Function],
0|app    |       connectionPoolClosed: [Function],
0|app    |       connectionCreated: [Function],
0|app    |       connectionReady: [Function],
0|app    |       connectionClosed: [Function],
0|app    |       connectionCheckOutStarted: [Function],
0|app    |       connectionCheckOutFailed: [Function],
0|app    |       connectionCheckedOut: [Function],
0|app    |       connectionCheckedIn: [Function],
0|app    |       connectionPoolCleared: [Function],
0|app    |       open: [Function]
0|app    |     },
0|app    |     _eventsCount: 35,
0|app    |     _maxListeners: Infinity,
0|app    |     s: {
0|app    |       id: 0,
0|app    |       options: [Object],
0|app    |       seedlist: [Array],
0|app    |       state: 'connected',
0|app    |       description: [TopologyDescription],
0|app    |       serverSelectionTimeoutMS: 30000,
0|app    |       heartbeatFrequencyMS: 10000,
0|app    |       minHeartbeatFrequencyMS: 500,
0|app    |       Cursor: [class Cursor extends CoreCursor],
0|app    |       bson: BSON {},
0|app    |       servers: [Map],
0|app    |       sessionPool: [ServerSessionPool],
0|app    |       sessions: Set {},
0|app    |       promiseLibrary: [Function: Promise],
0|app    |       credentials: [MongoCredentials],
0|app    |       clusterTime: [Object],
0|app    |       connectionTimers: Set {},
0|app    |       srvPoller: [SrvPoller],
0|app    |       detectTopologyDescriptionChange: [Function],
0|app    |       sCapabilities: [ServerCapabilities]
0|app    |     },
0|app    |     [Symbol(kCapture)]: false,
0|app    |     [Symbol(waitQueue)]: Denque { _head: 3, _tail: 3, _capacityMask: 3, _list: [Array] }
0|app    |   },
0|app    |   cursorState: {
0|app    |     cursorId: null,
0|app    |     cmd: {
0|app    |       find: 'blog_post.notice',
0|app    |       limit: 0,
0|app    |       skip: 0,
0|app    |       query: {},
0|app    |       raw: undefined,
0|app    |       hint: null,
0|app    |       timeout: undefined,
0|app    |       slaveOk: true,
0|app    |       readPreference: [ReadPreference]
0|app    |     },
0|app    |     documents: [],
0|app    |     cursorIndex: 0,
0|app    |     dead: false,
0|app    |     killed: false,
0|app    |     init: false,
0|app    |     notified: false,
0|app    |     limit: 0,
0|app    |     skip: 0,
0|app    |     batchSize: 1000,
0|app    |     currentLimit: 0,
0|app    |     transforms: undefined,
0|app    |     raw: undefined
0|app    |   },
0|app    |   logger: Logger { className: 'Cursor' },
0|app    |   s: {
0|app    |     numberOfRetries: 5,
0|app    |     tailableRetryInterval: 500,
0|app    |     currentNumberOfRetries: 5,
0|app    |     state: 0,
0|app    |     promiseLibrary: [Function: Promise],
0|app    |     explicitlyIgnoreSession: false
0|app    |   },
0|app    |   [Symbol(kCapture)]: false
0|app    | }